# -*- coding: utf-8 -*-
"""412020016_MahesaRafianSyah

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mIW8moj4dYebWBD1kijYBBBuP_IBr3sG
"""

# MAHESA RAFIAN SYAH 412020016

!pip install mlflow
!pip install statsmodels
!pip install seaborn

import mlflow
import numpy as np
import pandas as pd
import statsmodels.api as sm
import seaborn as sns
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

sns.set()

# Set MLflow experiment
mlflow.set_experiment('test-mlflow')

# Load raw data
raw_data = pd.read_csv('1.04. Real-life example.csv')

# Log parameters
mlflow.log_param('Dataset', '1.04. Real-life example.csv')

# Preprocessing
data = raw_data.drop(['Model'], axis=1)
data_no_mv = data.dropna(axis=0)

# Log metrics
mlflow.log_metric('Data Rows', data.shape[0])
mlflow.log_metric('Data Columns', data.shape[1])
mlflow.log_metric('Missing Values', data.isnull().sum().sum())

# Data cleaning and processing
q = data_no_mv['Price'].quantile(0.99)
data_1 = data_no_mv[data_no_mv['Price'] < q]
q = data_1['Mileage'].quantile(0.99)
data_2 = data_1[data_1['Mileage'] < q]
data_3 = data_2[data_2['EngineV'] < 6.5]
q = data_3['Year'].quantile(0.01)
data_4 = data_3[data_3['Year'] > q]
data_cleaned = data_4.reset_index(drop=True)

# Describe cleaned data
data_cleaned_description = data_cleaned.describe(include='all')
mlflow.log_text(data_cleaned_description.to_string(), 'Data Description')

# Define features and target
X = data_cleaned[['Mileage', 'Year', 'EngineV']]
y = data_cleaned['Price']

# Perform feature scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Fit linear regression model
regression = LinearRegression()
regression.fit(X_scaled, y)

# Log model parameters
coefficients = regression.coef_
intercept = regression.intercept_
mlflow.log_params({'Coefficient 1': coefficients[0], 'Coefficient 2': coefficients[1], 'Coefficient 3': coefficients[2]})
mlflow.log_param('Intercept', intercept)

# Perform predictions
y_pred = regression.predict(X_scaled)

# Scatter plot of Actual Price vs Predicted Price
plt.scatter(y, y_pred, color='blue', alpha=0.5)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Price vs. Predicted Price')

# Save and log the plot as an artifact
plot_path = 'scatter_plot_actual_vs_predicted.png'
plt.savefig(plot_path)
mlflow.log_artifact(plot_path)

# Close the MLflow run
mlflow.end_run()